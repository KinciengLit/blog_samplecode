// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#ifndef PROTOBUF_main_2eproto__INCLUDED
#define PROTOBUF_main_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protoc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_main_2eproto();
void protobuf_AssignDesc_main_2eproto();
void protobuf_ShutdownFile_main_2eproto();

class PbPkg;
class S2C_UPDATE_PLAYER;
class S2C_UPDATE_ENTITY;
class S2C_CommonAPI;
class C2S_UPDATE_PLAYER;
class C2S_UPDATE_ENTITY;
class C2S_CommonAPI;

// ===================================================================

class PbPkg : public ::google::protobuf::Message {
 public:
  PbPkg();
  virtual ~PbPkg();

  PbPkg(const PbPkg& from);

  inline PbPkg& operator=(const PbPkg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbPkg& default_instance();

  void Swap(PbPkg* other);

  // implements Message ----------------------------------------------

  PbPkg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbPkg& from);
  void MergeFrom(const PbPkg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Protoc.PbPkg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();

  void InitAsDefaultInstance();
  static PbPkg* default_instance_;
};
// -------------------------------------------------------------------

class S2C_UPDATE_PLAYER : public ::google::protobuf::Message {
 public:
  S2C_UPDATE_PLAYER();
  virtual ~S2C_UPDATE_PLAYER();

  S2C_UPDATE_PLAYER(const S2C_UPDATE_PLAYER& from);

  inline S2C_UPDATE_PLAYER& operator=(const S2C_UPDATE_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_UPDATE_PLAYER& default_instance();

  void Swap(S2C_UPDATE_PLAYER* other);

  // implements Message ----------------------------------------------

  S2C_UPDATE_PLAYER* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_UPDATE_PLAYER& from);
  void MergeFrom(const S2C_UPDATE_PLAYER& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 mp = 5;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 5;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protoc.S2C_UPDATE_PLAYER)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_mp();
  inline void clear_has_mp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 mp_;
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();

  void InitAsDefaultInstance();
  static S2C_UPDATE_PLAYER* default_instance_;
};
// -------------------------------------------------------------------

class S2C_UPDATE_ENTITY : public ::google::protobuf::Message {
 public:
  S2C_UPDATE_ENTITY();
  virtual ~S2C_UPDATE_ENTITY();

  S2C_UPDATE_ENTITY(const S2C_UPDATE_ENTITY& from);

  inline S2C_UPDATE_ENTITY& operator=(const S2C_UPDATE_ENTITY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_UPDATE_ENTITY& default_instance();

  void Swap(S2C_UPDATE_ENTITY* other);

  // implements Message ----------------------------------------------

  S2C_UPDATE_ENTITY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_UPDATE_ENTITY& from);
  void MergeFrom(const S2C_UPDATE_ENTITY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // required int32 face = 5;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 5;
  inline ::google::protobuf::int32 face() const;
  inline void set_face(::google::protobuf::int32 value);

  // required int32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required bool isPlayer = 7;
  inline bool has_isplayer() const;
  inline void clear_isplayer();
  static const int kIsPlayerFieldNumber = 7;
  inline bool isplayer() const;
  inline void set_isplayer(bool value);

  // @@protoc_insertion_point(class_scope:Protoc.S2C_UPDATE_ENTITY)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_isplayer();
  inline void clear_has_isplayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::int32 face_;
  ::google::protobuf::int32 status_;
  bool isplayer_;
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();

  void InitAsDefaultInstance();
  static S2C_UPDATE_ENTITY* default_instance_;
};
// -------------------------------------------------------------------

class S2C_CommonAPI : public ::google::protobuf::Message {
 public:
  S2C_CommonAPI();
  virtual ~S2C_CommonAPI();

  S2C_CommonAPI(const S2C_CommonAPI& from);

  inline S2C_CommonAPI& operator=(const S2C_CommonAPI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_CommonAPI& default_instance();

  void Swap(S2C_CommonAPI* other);

  // implements Message ----------------------------------------------

  S2C_CommonAPI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_CommonAPI& from);
  void MergeFrom(const S2C_CommonAPI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string api = 1;
  inline bool has_api() const;
  inline void clear_api();
  static const int kApiFieldNumber = 1;
  inline const ::std::string& api() const;
  inline void set_api(const ::std::string& value);
  inline void set_api(const char* value);
  inline void set_api(const char* value, size_t size);
  inline ::std::string* mutable_api();
  inline ::std::string* release_api();
  inline void set_allocated_api(::std::string* api);

  // required string args = 2;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::std::string& args() const;
  inline void set_args(const ::std::string& value);
  inline void set_args(const char* value);
  inline void set_args(const char* value, size_t size);
  inline ::std::string* mutable_args();
  inline ::std::string* release_args();
  inline void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:Protoc.S2C_CommonAPI)
 private:
  inline void set_has_api();
  inline void clear_has_api();
  inline void set_has_args();
  inline void clear_has_args();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* api_;
  ::std::string* args_;
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();

  void InitAsDefaultInstance();
  static S2C_CommonAPI* default_instance_;
};
// -------------------------------------------------------------------

class C2S_UPDATE_PLAYER : public ::google::protobuf::Message {
 public:
  C2S_UPDATE_PLAYER();
  virtual ~C2S_UPDATE_PLAYER();

  C2S_UPDATE_PLAYER(const C2S_UPDATE_PLAYER& from);

  inline C2S_UPDATE_PLAYER& operator=(const C2S_UPDATE_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_UPDATE_PLAYER& default_instance();

  void Swap(C2S_UPDATE_PLAYER* other);

  // implements Message ----------------------------------------------

  C2S_UPDATE_PLAYER* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_UPDATE_PLAYER& from);
  void MergeFrom(const C2S_UPDATE_PLAYER& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 mp = 5;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 5;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protoc.C2S_UPDATE_PLAYER)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_mp();
  inline void clear_has_mp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 mp_;
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();

  void InitAsDefaultInstance();
  static C2S_UPDATE_PLAYER* default_instance_;
};
// -------------------------------------------------------------------

class C2S_UPDATE_ENTITY : public ::google::protobuf::Message {
 public:
  C2S_UPDATE_ENTITY();
  virtual ~C2S_UPDATE_ENTITY();

  C2S_UPDATE_ENTITY(const C2S_UPDATE_ENTITY& from);

  inline C2S_UPDATE_ENTITY& operator=(const C2S_UPDATE_ENTITY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_UPDATE_ENTITY& default_instance();

  void Swap(C2S_UPDATE_ENTITY* other);

  // implements Message ----------------------------------------------

  C2S_UPDATE_ENTITY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_UPDATE_ENTITY& from);
  void MergeFrom(const C2S_UPDATE_ENTITY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Protoc.C2S_UPDATE_ENTITY)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();

  void InitAsDefaultInstance();
  static C2S_UPDATE_ENTITY* default_instance_;
};
// -------------------------------------------------------------------

class C2S_CommonAPI : public ::google::protobuf::Message {
 public:
  C2S_CommonAPI();
  virtual ~C2S_CommonAPI();

  C2S_CommonAPI(const C2S_CommonAPI& from);

  inline C2S_CommonAPI& operator=(const C2S_CommonAPI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_CommonAPI& default_instance();

  void Swap(C2S_CommonAPI* other);

  // implements Message ----------------------------------------------

  C2S_CommonAPI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_CommonAPI& from);
  void MergeFrom(const C2S_CommonAPI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string api = 1;
  inline bool has_api() const;
  inline void clear_api();
  static const int kApiFieldNumber = 1;
  inline const ::std::string& api() const;
  inline void set_api(const ::std::string& value);
  inline void set_api(const char* value);
  inline void set_api(const char* value, size_t size);
  inline ::std::string* mutable_api();
  inline ::std::string* release_api();
  inline void set_allocated_api(::std::string* api);

  // required string args = 2;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::std::string& args() const;
  inline void set_args(const ::std::string& value);
  inline void set_args(const char* value);
  inline void set_args(const char* value, size_t size);
  inline ::std::string* mutable_args();
  inline ::std::string* release_args();
  inline void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:Protoc.C2S_CommonAPI)
 private:
  inline void set_has_api();
  inline void clear_has_api();
  inline void set_has_args();
  inline void clear_has_args();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* api_;
  ::std::string* args_;
  friend void  protobuf_AddDesc_main_2eproto();
  friend void protobuf_AssignDesc_main_2eproto();
  friend void protobuf_ShutdownFile_main_2eproto();

  void InitAsDefaultInstance();
  static C2S_CommonAPI* default_instance_;
};
// ===================================================================


// ===================================================================

// PbPkg

// required int32 id = 1;
inline bool PbPkg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbPkg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbPkg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbPkg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PbPkg::id() const {
  // @@protoc_insertion_point(field_get:Protoc.PbPkg.id)
  return id_;
}
inline void PbPkg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Protoc.PbPkg.id)
}

// required bytes data = 2;
inline bool PbPkg::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbPkg::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbPkg::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbPkg::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& PbPkg::data() const {
  // @@protoc_insertion_point(field_get:Protoc.PbPkg.data)
  return *data_;
}
inline void PbPkg::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Protoc.PbPkg.data)
}
inline void PbPkg::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protoc.PbPkg.data)
}
inline void PbPkg::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protoc.PbPkg.data)
}
inline ::std::string* PbPkg::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protoc.PbPkg.data)
  return data_;
}
inline ::std::string* PbPkg::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbPkg::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protoc.PbPkg.data)
}

// -------------------------------------------------------------------

// S2C_UPDATE_PLAYER

// required string id = 1;
inline bool S2C_UPDATE_PLAYER::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_UPDATE_PLAYER::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_UPDATE_PLAYER::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_UPDATE_PLAYER::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& S2C_UPDATE_PLAYER::id() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_PLAYER.id)
  return *id_;
}
inline void S2C_UPDATE_PLAYER::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_PLAYER.id)
}
inline void S2C_UPDATE_PLAYER::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protoc.S2C_UPDATE_PLAYER.id)
}
inline void S2C_UPDATE_PLAYER::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protoc.S2C_UPDATE_PLAYER.id)
}
inline ::std::string* S2C_UPDATE_PLAYER::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protoc.S2C_UPDATE_PLAYER.id)
  return id_;
}
inline ::std::string* S2C_UPDATE_PLAYER::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2C_UPDATE_PLAYER::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protoc.S2C_UPDATE_PLAYER.id)
}

// required string name = 2;
inline bool S2C_UPDATE_PLAYER::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_UPDATE_PLAYER::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_UPDATE_PLAYER::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_UPDATE_PLAYER::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& S2C_UPDATE_PLAYER::name() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_PLAYER.name)
  return *name_;
}
inline void S2C_UPDATE_PLAYER::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_PLAYER.name)
}
inline void S2C_UPDATE_PLAYER::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protoc.S2C_UPDATE_PLAYER.name)
}
inline void S2C_UPDATE_PLAYER::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protoc.S2C_UPDATE_PLAYER.name)
}
inline ::std::string* S2C_UPDATE_PLAYER::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protoc.S2C_UPDATE_PLAYER.name)
  return name_;
}
inline ::std::string* S2C_UPDATE_PLAYER::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2C_UPDATE_PLAYER::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protoc.S2C_UPDATE_PLAYER.name)
}

// required int32 lv = 3;
inline bool S2C_UPDATE_PLAYER::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_UPDATE_PLAYER::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_UPDATE_PLAYER::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_UPDATE_PLAYER::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 S2C_UPDATE_PLAYER::lv() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_PLAYER.lv)
  return lv_;
}
inline void S2C_UPDATE_PLAYER::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_PLAYER.lv)
}

// required int32 hp = 4;
inline bool S2C_UPDATE_PLAYER::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2C_UPDATE_PLAYER::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2C_UPDATE_PLAYER::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2C_UPDATE_PLAYER::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 S2C_UPDATE_PLAYER::hp() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_PLAYER.hp)
  return hp_;
}
inline void S2C_UPDATE_PLAYER::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_PLAYER.hp)
}

// required int32 mp = 5;
inline bool S2C_UPDATE_PLAYER::has_mp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2C_UPDATE_PLAYER::set_has_mp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2C_UPDATE_PLAYER::clear_has_mp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2C_UPDATE_PLAYER::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 S2C_UPDATE_PLAYER::mp() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_PLAYER.mp)
  return mp_;
}
inline void S2C_UPDATE_PLAYER::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_PLAYER.mp)
}

// -------------------------------------------------------------------

// S2C_UPDATE_ENTITY

// required int32 id = 1;
inline bool S2C_UPDATE_ENTITY::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_UPDATE_ENTITY::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_UPDATE_ENTITY::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_UPDATE_ENTITY::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 S2C_UPDATE_ENTITY::id() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_ENTITY.id)
  return id_;
}
inline void S2C_UPDATE_ENTITY::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_ENTITY.id)
}

// required int32 x = 2;
inline bool S2C_UPDATE_ENTITY::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_UPDATE_ENTITY::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_UPDATE_ENTITY::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_UPDATE_ENTITY::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 S2C_UPDATE_ENTITY::x() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_ENTITY.x)
  return x_;
}
inline void S2C_UPDATE_ENTITY::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_ENTITY.x)
}

// required int32 y = 3;
inline bool S2C_UPDATE_ENTITY::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_UPDATE_ENTITY::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_UPDATE_ENTITY::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_UPDATE_ENTITY::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 S2C_UPDATE_ENTITY::y() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_ENTITY.y)
  return y_;
}
inline void S2C_UPDATE_ENTITY::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_ENTITY.y)
}

// required int32 z = 4;
inline bool S2C_UPDATE_ENTITY::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2C_UPDATE_ENTITY::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2C_UPDATE_ENTITY::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2C_UPDATE_ENTITY::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 S2C_UPDATE_ENTITY::z() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_ENTITY.z)
  return z_;
}
inline void S2C_UPDATE_ENTITY::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_ENTITY.z)
}

// required int32 face = 5;
inline bool S2C_UPDATE_ENTITY::has_face() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2C_UPDATE_ENTITY::set_has_face() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2C_UPDATE_ENTITY::clear_has_face() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2C_UPDATE_ENTITY::clear_face() {
  face_ = 0;
  clear_has_face();
}
inline ::google::protobuf::int32 S2C_UPDATE_ENTITY::face() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_ENTITY.face)
  return face_;
}
inline void S2C_UPDATE_ENTITY::set_face(::google::protobuf::int32 value) {
  set_has_face();
  face_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_ENTITY.face)
}

// required int32 status = 6;
inline bool S2C_UPDATE_ENTITY::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2C_UPDATE_ENTITY::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2C_UPDATE_ENTITY::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2C_UPDATE_ENTITY::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 S2C_UPDATE_ENTITY::status() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_ENTITY.status)
  return status_;
}
inline void S2C_UPDATE_ENTITY::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_ENTITY.status)
}

// required bool isPlayer = 7;
inline bool S2C_UPDATE_ENTITY::has_isplayer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2C_UPDATE_ENTITY::set_has_isplayer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2C_UPDATE_ENTITY::clear_has_isplayer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2C_UPDATE_ENTITY::clear_isplayer() {
  isplayer_ = false;
  clear_has_isplayer();
}
inline bool S2C_UPDATE_ENTITY::isplayer() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_UPDATE_ENTITY.isPlayer)
  return isplayer_;
}
inline void S2C_UPDATE_ENTITY::set_isplayer(bool value) {
  set_has_isplayer();
  isplayer_ = value;
  // @@protoc_insertion_point(field_set:Protoc.S2C_UPDATE_ENTITY.isPlayer)
}

// -------------------------------------------------------------------

// S2C_CommonAPI

// required string api = 1;
inline bool S2C_CommonAPI::has_api() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_CommonAPI::set_has_api() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_CommonAPI::clear_has_api() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_CommonAPI::clear_api() {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_->clear();
  }
  clear_has_api();
}
inline const ::std::string& S2C_CommonAPI::api() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_CommonAPI.api)
  return *api_;
}
inline void S2C_CommonAPI::set_api(const ::std::string& value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set:Protoc.S2C_CommonAPI.api)
}
inline void S2C_CommonAPI::set_api(const char* value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protoc.S2C_CommonAPI.api)
}
inline void S2C_CommonAPI::set_api(const char* value, size_t size) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protoc.S2C_CommonAPI.api)
}
inline ::std::string* S2C_CommonAPI::mutable_api() {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protoc.S2C_CommonAPI.api)
  return api_;
}
inline ::std::string* S2C_CommonAPI::release_api() {
  clear_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = api_;
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2C_CommonAPI::set_allocated_api(::std::string* api) {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (api) {
    set_has_api();
    api_ = api;
  } else {
    clear_has_api();
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protoc.S2C_CommonAPI.api)
}

// required string args = 2;
inline bool S2C_CommonAPI::has_args() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_CommonAPI::set_has_args() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_CommonAPI::clear_has_args() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_CommonAPI::clear_args() {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_->clear();
  }
  clear_has_args();
}
inline const ::std::string& S2C_CommonAPI::args() const {
  // @@protoc_insertion_point(field_get:Protoc.S2C_CommonAPI.args)
  return *args_;
}
inline void S2C_CommonAPI::set_args(const ::std::string& value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set:Protoc.S2C_CommonAPI.args)
}
inline void S2C_CommonAPI::set_args(const char* value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protoc.S2C_CommonAPI.args)
}
inline void S2C_CommonAPI::set_args(const char* value, size_t size) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protoc.S2C_CommonAPI.args)
}
inline ::std::string* S2C_CommonAPI::mutable_args() {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protoc.S2C_CommonAPI.args)
  return args_;
}
inline ::std::string* S2C_CommonAPI::release_args() {
  clear_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = args_;
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void S2C_CommonAPI::set_allocated_args(::std::string* args) {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (args) {
    set_has_args();
    args_ = args;
  } else {
    clear_has_args();
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protoc.S2C_CommonAPI.args)
}

// -------------------------------------------------------------------

// C2S_UPDATE_PLAYER

// required string id = 1;
inline bool C2S_UPDATE_PLAYER::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_UPDATE_PLAYER::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_UPDATE_PLAYER::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_UPDATE_PLAYER::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& C2S_UPDATE_PLAYER::id() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_UPDATE_PLAYER.id)
  return *id_;
}
inline void C2S_UPDATE_PLAYER::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Protoc.C2S_UPDATE_PLAYER.id)
}
inline void C2S_UPDATE_PLAYER::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protoc.C2S_UPDATE_PLAYER.id)
}
inline void C2S_UPDATE_PLAYER::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protoc.C2S_UPDATE_PLAYER.id)
}
inline ::std::string* C2S_UPDATE_PLAYER::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protoc.C2S_UPDATE_PLAYER.id)
  return id_;
}
inline ::std::string* C2S_UPDATE_PLAYER::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void C2S_UPDATE_PLAYER::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protoc.C2S_UPDATE_PLAYER.id)
}

// required int32 hp = 4;
inline bool C2S_UPDATE_PLAYER::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_UPDATE_PLAYER::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_UPDATE_PLAYER::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_UPDATE_PLAYER::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 C2S_UPDATE_PLAYER::hp() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_UPDATE_PLAYER.hp)
  return hp_;
}
inline void C2S_UPDATE_PLAYER::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:Protoc.C2S_UPDATE_PLAYER.hp)
}

// required int32 mp = 5;
inline bool C2S_UPDATE_PLAYER::has_mp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2S_UPDATE_PLAYER::set_has_mp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2S_UPDATE_PLAYER::clear_has_mp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2S_UPDATE_PLAYER::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 C2S_UPDATE_PLAYER::mp() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_UPDATE_PLAYER.mp)
  return mp_;
}
inline void C2S_UPDATE_PLAYER::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
  // @@protoc_insertion_point(field_set:Protoc.C2S_UPDATE_PLAYER.mp)
}

// -------------------------------------------------------------------

// C2S_UPDATE_ENTITY

// required int32 id = 1;
inline bool C2S_UPDATE_ENTITY::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_UPDATE_ENTITY::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_UPDATE_ENTITY::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_UPDATE_ENTITY::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 C2S_UPDATE_ENTITY::id() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_UPDATE_ENTITY.id)
  return id_;
}
inline void C2S_UPDATE_ENTITY::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Protoc.C2S_UPDATE_ENTITY.id)
}

// required int32 x = 2;
inline bool C2S_UPDATE_ENTITY::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_UPDATE_ENTITY::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_UPDATE_ENTITY::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_UPDATE_ENTITY::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 C2S_UPDATE_ENTITY::x() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_UPDATE_ENTITY.x)
  return x_;
}
inline void C2S_UPDATE_ENTITY::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Protoc.C2S_UPDATE_ENTITY.x)
}

// required int32 y = 3;
inline bool C2S_UPDATE_ENTITY::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2S_UPDATE_ENTITY::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2S_UPDATE_ENTITY::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2S_UPDATE_ENTITY::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 C2S_UPDATE_ENTITY::y() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_UPDATE_ENTITY.y)
  return y_;
}
inline void C2S_UPDATE_ENTITY::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Protoc.C2S_UPDATE_ENTITY.y)
}

// required int32 z = 4;
inline bool C2S_UPDATE_ENTITY::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void C2S_UPDATE_ENTITY::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void C2S_UPDATE_ENTITY::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void C2S_UPDATE_ENTITY::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 C2S_UPDATE_ENTITY::z() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_UPDATE_ENTITY.z)
  return z_;
}
inline void C2S_UPDATE_ENTITY::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Protoc.C2S_UPDATE_ENTITY.z)
}

// -------------------------------------------------------------------

// C2S_CommonAPI

// required string api = 1;
inline bool C2S_CommonAPI::has_api() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_CommonAPI::set_has_api() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_CommonAPI::clear_has_api() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_CommonAPI::clear_api() {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_->clear();
  }
  clear_has_api();
}
inline const ::std::string& C2S_CommonAPI::api() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_CommonAPI.api)
  return *api_;
}
inline void C2S_CommonAPI::set_api(const ::std::string& value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set:Protoc.C2S_CommonAPI.api)
}
inline void C2S_CommonAPI::set_api(const char* value) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protoc.C2S_CommonAPI.api)
}
inline void C2S_CommonAPI::set_api(const char* value, size_t size) {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  api_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protoc.C2S_CommonAPI.api)
}
inline ::std::string* C2S_CommonAPI::mutable_api() {
  set_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    api_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protoc.C2S_CommonAPI.api)
  return api_;
}
inline ::std::string* C2S_CommonAPI::release_api() {
  clear_has_api();
  if (api_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = api_;
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void C2S_CommonAPI::set_allocated_api(::std::string* api) {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (api) {
    set_has_api();
    api_ = api;
  } else {
    clear_has_api();
    api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protoc.C2S_CommonAPI.api)
}

// required string args = 2;
inline bool C2S_CommonAPI::has_args() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_CommonAPI::set_has_args() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_CommonAPI::clear_has_args() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_CommonAPI::clear_args() {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_->clear();
  }
  clear_has_args();
}
inline const ::std::string& C2S_CommonAPI::args() const {
  // @@protoc_insertion_point(field_get:Protoc.C2S_CommonAPI.args)
  return *args_;
}
inline void C2S_CommonAPI::set_args(const ::std::string& value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set:Protoc.C2S_CommonAPI.args)
}
inline void C2S_CommonAPI::set_args(const char* value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protoc.C2S_CommonAPI.args)
}
inline void C2S_CommonAPI::set_args(const char* value, size_t size) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  args_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protoc.C2S_CommonAPI.args)
}
inline ::std::string* C2S_CommonAPI::mutable_args() {
  set_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    args_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protoc.C2S_CommonAPI.args)
  return args_;
}
inline ::std::string* C2S_CommonAPI::release_args() {
  clear_has_args();
  if (args_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = args_;
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void C2S_CommonAPI::set_allocated_args(::std::string* args) {
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (args) {
    set_has_args();
    args_ = args;
  } else {
    clear_has_args();
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protoc.C2S_CommonAPI.args)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_main_2eproto__INCLUDED
