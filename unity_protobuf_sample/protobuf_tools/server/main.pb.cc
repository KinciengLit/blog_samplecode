// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "main.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protoc {

namespace {

const ::google::protobuf::Descriptor* PbPkg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbPkg_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_UPDATE_PLAYER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_UPDATE_PLAYER_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_UPDATE_ENTITY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_UPDATE_ENTITY_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_CommonAPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_CommonAPI_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_UPDATE_PLAYER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_UPDATE_PLAYER_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_UPDATE_ENTITY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_UPDATE_ENTITY_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_CommonAPI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_CommonAPI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_main_2eproto() {
  protobuf_AddDesc_main_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "main.proto");
  GOOGLE_CHECK(file != NULL);
  PbPkg_descriptor_ = file->message_type(0);
  static const int PbPkg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPkg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPkg, data_),
  };
  PbPkg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbPkg_descriptor_,
      PbPkg::default_instance_,
      PbPkg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPkg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbPkg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbPkg));
  S2C_UPDATE_PLAYER_descriptor_ = file->message_type(1);
  static const int S2C_UPDATE_PLAYER_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_PLAYER, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_PLAYER, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_PLAYER, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_PLAYER, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_PLAYER, mp_),
  };
  S2C_UPDATE_PLAYER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_UPDATE_PLAYER_descriptor_,
      S2C_UPDATE_PLAYER::default_instance_,
      S2C_UPDATE_PLAYER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_PLAYER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_PLAYER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_UPDATE_PLAYER));
  S2C_UPDATE_ENTITY_descriptor_ = file->message_type(2);
  static const int S2C_UPDATE_ENTITY_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, isplayer_),
  };
  S2C_UPDATE_ENTITY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_UPDATE_ENTITY_descriptor_,
      S2C_UPDATE_ENTITY::default_instance_,
      S2C_UPDATE_ENTITY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_UPDATE_ENTITY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_UPDATE_ENTITY));
  S2C_CommonAPI_descriptor_ = file->message_type(3);
  static const int S2C_CommonAPI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CommonAPI, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CommonAPI, args_),
  };
  S2C_CommonAPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_CommonAPI_descriptor_,
      S2C_CommonAPI::default_instance_,
      S2C_CommonAPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CommonAPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CommonAPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_CommonAPI));
  C2S_UPDATE_PLAYER_descriptor_ = file->message_type(4);
  static const int C2S_UPDATE_PLAYER_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_PLAYER, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_PLAYER, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_PLAYER, mp_),
  };
  C2S_UPDATE_PLAYER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_UPDATE_PLAYER_descriptor_,
      C2S_UPDATE_PLAYER::default_instance_,
      C2S_UPDATE_PLAYER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_PLAYER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_PLAYER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_UPDATE_PLAYER));
  C2S_UPDATE_ENTITY_descriptor_ = file->message_type(5);
  static const int C2S_UPDATE_ENTITY_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_ENTITY, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_ENTITY, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_ENTITY, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_ENTITY, z_),
  };
  C2S_UPDATE_ENTITY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_UPDATE_ENTITY_descriptor_,
      C2S_UPDATE_ENTITY::default_instance_,
      C2S_UPDATE_ENTITY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_ENTITY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_UPDATE_ENTITY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_UPDATE_ENTITY));
  C2S_CommonAPI_descriptor_ = file->message_type(6);
  static const int C2S_CommonAPI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CommonAPI, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CommonAPI, args_),
  };
  C2S_CommonAPI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_CommonAPI_descriptor_,
      C2S_CommonAPI::default_instance_,
      C2S_CommonAPI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CommonAPI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CommonAPI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_CommonAPI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_main_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbPkg_descriptor_, &PbPkg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_UPDATE_PLAYER_descriptor_, &S2C_UPDATE_PLAYER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_UPDATE_ENTITY_descriptor_, &S2C_UPDATE_ENTITY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_CommonAPI_descriptor_, &S2C_CommonAPI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_UPDATE_PLAYER_descriptor_, &C2S_UPDATE_PLAYER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_UPDATE_ENTITY_descriptor_, &C2S_UPDATE_ENTITY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_CommonAPI_descriptor_, &C2S_CommonAPI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_main_2eproto() {
  delete PbPkg::default_instance_;
  delete PbPkg_reflection_;
  delete S2C_UPDATE_PLAYER::default_instance_;
  delete S2C_UPDATE_PLAYER_reflection_;
  delete S2C_UPDATE_ENTITY::default_instance_;
  delete S2C_UPDATE_ENTITY_reflection_;
  delete S2C_CommonAPI::default_instance_;
  delete S2C_CommonAPI_reflection_;
  delete C2S_UPDATE_PLAYER::default_instance_;
  delete C2S_UPDATE_PLAYER_reflection_;
  delete C2S_UPDATE_ENTITY::default_instance_;
  delete C2S_UPDATE_ENTITY_reflection_;
  delete C2S_CommonAPI::default_instance_;
  delete C2S_CommonAPI_reflection_;
}

void protobuf_AddDesc_main_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmain.proto\022\006Protoc\"!\n\005PbPkg\022\n\n\002id\030\001 \002("
    "\005\022\014\n\004data\030\002 \002(\014\"Q\n\021S2C_UPDATE_PLAYER\022\n\n\002"
    "id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\n\n\002lv\030\003 \002(\005\022\n\n\002hp"
    "\030\004 \002(\005\022\n\n\002mp\030\005 \002(\005\"p\n\021S2C_UPDATE_ENTITY\022"
    "\n\n\002id\030\001 \002(\005\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\022\t\n\001z\030\004"
    " \002(\005\022\014\n\004face\030\005 \002(\005\022\016\n\006status\030\006 \002(\005\022\020\n\010is"
    "Player\030\007 \002(\010\"*\n\rS2C_CommonAPI\022\013\n\003api\030\001 \002"
    "(\t\022\014\n\004args\030\002 \002(\t\"7\n\021C2S_UPDATE_PLAYER\022\n\n"
    "\002id\030\001 \002(\t\022\n\n\002hp\030\004 \002(\005\022\n\n\002mp\030\005 \002(\005\"@\n\021C2S"
    "_UPDATE_ENTITY\022\n\n\002id\030\001 \002(\005\022\t\n\001x\030\002 \002(\005\022\t\n"
    "\001y\030\003 \002(\005\022\t\n\001z\030\004 \002(\005\"*\n\rC2S_CommonAPI\022\013\n\003"
    "api\030\001 \002(\t\022\014\n\004args\030\002 \002(\t", 463);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "main.proto", &protobuf_RegisterTypes);
  PbPkg::default_instance_ = new PbPkg();
  S2C_UPDATE_PLAYER::default_instance_ = new S2C_UPDATE_PLAYER();
  S2C_UPDATE_ENTITY::default_instance_ = new S2C_UPDATE_ENTITY();
  S2C_CommonAPI::default_instance_ = new S2C_CommonAPI();
  C2S_UPDATE_PLAYER::default_instance_ = new C2S_UPDATE_PLAYER();
  C2S_UPDATE_ENTITY::default_instance_ = new C2S_UPDATE_ENTITY();
  C2S_CommonAPI::default_instance_ = new C2S_CommonAPI();
  PbPkg::default_instance_->InitAsDefaultInstance();
  S2C_UPDATE_PLAYER::default_instance_->InitAsDefaultInstance();
  S2C_UPDATE_ENTITY::default_instance_->InitAsDefaultInstance();
  S2C_CommonAPI::default_instance_->InitAsDefaultInstance();
  C2S_UPDATE_PLAYER::default_instance_->InitAsDefaultInstance();
  C2S_UPDATE_ENTITY::default_instance_->InitAsDefaultInstance();
  C2S_CommonAPI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_main_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_main_2eproto {
  StaticDescriptorInitializer_main_2eproto() {
    protobuf_AddDesc_main_2eproto();
  }
} static_descriptor_initializer_main_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbPkg::kIdFieldNumber;
const int PbPkg::kDataFieldNumber;
#endif  // !_MSC_VER

PbPkg::PbPkg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protoc.PbPkg)
}

void PbPkg::InitAsDefaultInstance() {
}

PbPkg::PbPkg(const PbPkg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protoc.PbPkg)
}

void PbPkg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbPkg::~PbPkg() {
  // @@protoc_insertion_point(destructor:Protoc.PbPkg)
  SharedDtor();
}

void PbPkg::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PbPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbPkg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbPkg_descriptor_;
}

const PbPkg& PbPkg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_main_2eproto();
  return *default_instance_;
}

PbPkg* PbPkg::default_instance_ = NULL;

PbPkg* PbPkg::New() const {
  return new PbPkg;
}

void PbPkg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protoc.PbPkg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protoc.PbPkg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protoc.PbPkg)
  return false;
#undef DO_
}

void PbPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protoc.PbPkg)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protoc.PbPkg)
}

::google::protobuf::uint8* PbPkg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protoc.PbPkg)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protoc.PbPkg)
  return target;
}

int PbPkg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbPkg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbPkg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbPkg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbPkg::MergeFrom(const PbPkg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbPkg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbPkg::CopyFrom(const PbPkg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbPkg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PbPkg::Swap(PbPkg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbPkg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbPkg_descriptor_;
  metadata.reflection = PbPkg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_UPDATE_PLAYER::kIdFieldNumber;
const int S2C_UPDATE_PLAYER::kNameFieldNumber;
const int S2C_UPDATE_PLAYER::kLvFieldNumber;
const int S2C_UPDATE_PLAYER::kHpFieldNumber;
const int S2C_UPDATE_PLAYER::kMpFieldNumber;
#endif  // !_MSC_VER

S2C_UPDATE_PLAYER::S2C_UPDATE_PLAYER()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protoc.S2C_UPDATE_PLAYER)
}

void S2C_UPDATE_PLAYER::InitAsDefaultInstance() {
}

S2C_UPDATE_PLAYER::S2C_UPDATE_PLAYER(const S2C_UPDATE_PLAYER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protoc.S2C_UPDATE_PLAYER)
}

void S2C_UPDATE_PLAYER::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lv_ = 0;
  hp_ = 0;
  mp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_UPDATE_PLAYER::~S2C_UPDATE_PLAYER() {
  // @@protoc_insertion_point(destructor:Protoc.S2C_UPDATE_PLAYER)
  SharedDtor();
}

void S2C_UPDATE_PLAYER::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void S2C_UPDATE_PLAYER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_UPDATE_PLAYER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_UPDATE_PLAYER_descriptor_;
}

const S2C_UPDATE_PLAYER& S2C_UPDATE_PLAYER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_main_2eproto();
  return *default_instance_;
}

S2C_UPDATE_PLAYER* S2C_UPDATE_PLAYER::default_instance_ = NULL;

S2C_UPDATE_PLAYER* S2C_UPDATE_PLAYER::New() const {
  return new S2C_UPDATE_PLAYER;
}

void S2C_UPDATE_PLAYER::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<S2C_UPDATE_PLAYER*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lv_, mp_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_UPDATE_PLAYER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protoc.S2C_UPDATE_PLAYER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // required int32 lv = 3;
      case 3: {
        if (tag == 24) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // required int32 hp = 4;
      case 4: {
        if (tag == 32) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mp;
        break;
      }

      // required int32 mp = 5;
      case 5: {
        if (tag == 40) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protoc.S2C_UPDATE_PLAYER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protoc.S2C_UPDATE_PLAYER)
  return false;
#undef DO_
}

void S2C_UPDATE_PLAYER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protoc.S2C_UPDATE_PLAYER)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // required int32 mp = 5;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protoc.S2C_UPDATE_PLAYER)
}

::google::protobuf::uint8* S2C_UPDATE_PLAYER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protoc.S2C_UPDATE_PLAYER)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // required int32 mp = 5;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protoc.S2C_UPDATE_PLAYER)
  return target;
}

int S2C_UPDATE_PLAYER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 mp = 5;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_UPDATE_PLAYER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_UPDATE_PLAYER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_UPDATE_PLAYER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_UPDATE_PLAYER::MergeFrom(const S2C_UPDATE_PLAYER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_UPDATE_PLAYER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_UPDATE_PLAYER::CopyFrom(const S2C_UPDATE_PLAYER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_UPDATE_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2C_UPDATE_PLAYER::Swap(S2C_UPDATE_PLAYER* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_UPDATE_PLAYER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_UPDATE_PLAYER_descriptor_;
  metadata.reflection = S2C_UPDATE_PLAYER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_UPDATE_ENTITY::kIdFieldNumber;
const int S2C_UPDATE_ENTITY::kXFieldNumber;
const int S2C_UPDATE_ENTITY::kYFieldNumber;
const int S2C_UPDATE_ENTITY::kZFieldNumber;
const int S2C_UPDATE_ENTITY::kFaceFieldNumber;
const int S2C_UPDATE_ENTITY::kStatusFieldNumber;
const int S2C_UPDATE_ENTITY::kIsPlayerFieldNumber;
#endif  // !_MSC_VER

S2C_UPDATE_ENTITY::S2C_UPDATE_ENTITY()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protoc.S2C_UPDATE_ENTITY)
}

void S2C_UPDATE_ENTITY::InitAsDefaultInstance() {
}

S2C_UPDATE_ENTITY::S2C_UPDATE_ENTITY(const S2C_UPDATE_ENTITY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protoc.S2C_UPDATE_ENTITY)
}

void S2C_UPDATE_ENTITY::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  face_ = 0;
  status_ = 0;
  isplayer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_UPDATE_ENTITY::~S2C_UPDATE_ENTITY() {
  // @@protoc_insertion_point(destructor:Protoc.S2C_UPDATE_ENTITY)
  SharedDtor();
}

void S2C_UPDATE_ENTITY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_UPDATE_ENTITY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_UPDATE_ENTITY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_UPDATE_ENTITY_descriptor_;
}

const S2C_UPDATE_ENTITY& S2C_UPDATE_ENTITY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_main_2eproto();
  return *default_instance_;
}

S2C_UPDATE_ENTITY* S2C_UPDATE_ENTITY::default_instance_ = NULL;

S2C_UPDATE_ENTITY* S2C_UPDATE_ENTITY::New() const {
  return new S2C_UPDATE_ENTITY;
}

void S2C_UPDATE_ENTITY::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<S2C_UPDATE_ENTITY*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, isplayer_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_UPDATE_ENTITY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protoc.S2C_UPDATE_ENTITY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_z;
        break;
      }

      // required int32 z = 4;
      case 4: {
        if (tag == 32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_face;
        break;
      }

      // required int32 face = 5;
      case 5: {
        if (tag == 40) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required int32 status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isPlayer;
        break;
      }

      // required bool isPlayer = 7;
      case 7: {
        if (tag == 56) {
         parse_isPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplayer_)));
          set_has_isplayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protoc.S2C_UPDATE_ENTITY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protoc.S2C_UPDATE_ENTITY)
  return false;
#undef DO_
}

void S2C_UPDATE_ENTITY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protoc.S2C_UPDATE_ENTITY)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // required int32 z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->z(), output);
  }

  // required int32 face = 5;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->face(), output);
  }

  // required int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // required bool isPlayer = 7;
  if (has_isplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isplayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protoc.S2C_UPDATE_ENTITY)
}

::google::protobuf::uint8* S2C_UPDATE_ENTITY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protoc.S2C_UPDATE_ENTITY)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // required int32 z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->z(), target);
  }

  // required int32 face = 5;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->face(), target);
  }

  // required int32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // required bool isPlayer = 7;
  if (has_isplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isplayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protoc.S2C_UPDATE_ENTITY)
  return target;
}

int S2C_UPDATE_ENTITY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 z = 4;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

    // required int32 face = 5;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face());
    }

    // required int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required bool isPlayer = 7;
    if (has_isplayer()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_UPDATE_ENTITY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_UPDATE_ENTITY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_UPDATE_ENTITY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_UPDATE_ENTITY::MergeFrom(const S2C_UPDATE_ENTITY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_isplayer()) {
      set_isplayer(from.isplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_UPDATE_ENTITY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_UPDATE_ENTITY::CopyFrom(const S2C_UPDATE_ENTITY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_UPDATE_ENTITY::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void S2C_UPDATE_ENTITY::Swap(S2C_UPDATE_ENTITY* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(face_, other->face_);
    std::swap(status_, other->status_);
    std::swap(isplayer_, other->isplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_UPDATE_ENTITY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_UPDATE_ENTITY_descriptor_;
  metadata.reflection = S2C_UPDATE_ENTITY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_CommonAPI::kApiFieldNumber;
const int S2C_CommonAPI::kArgsFieldNumber;
#endif  // !_MSC_VER

S2C_CommonAPI::S2C_CommonAPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protoc.S2C_CommonAPI)
}

void S2C_CommonAPI::InitAsDefaultInstance() {
}

S2C_CommonAPI::S2C_CommonAPI(const S2C_CommonAPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protoc.S2C_CommonAPI)
}

void S2C_CommonAPI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_CommonAPI::~S2C_CommonAPI() {
  // @@protoc_insertion_point(destructor:Protoc.S2C_CommonAPI)
  SharedDtor();
}

void S2C_CommonAPI::SharedDtor() {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void S2C_CommonAPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_CommonAPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_CommonAPI_descriptor_;
}

const S2C_CommonAPI& S2C_CommonAPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_main_2eproto();
  return *default_instance_;
}

S2C_CommonAPI* S2C_CommonAPI::default_instance_ = NULL;

S2C_CommonAPI* S2C_CommonAPI::New() const {
  return new S2C_CommonAPI;
}

void S2C_CommonAPI::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_api()) {
      if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        api_->clear();
      }
    }
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_CommonAPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protoc.S2C_CommonAPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string api = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->api().data(), this->api().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "api");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required string args = 2;
      case 2: {
        if (tag == 18) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protoc.S2C_CommonAPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protoc.S2C_CommonAPI)
  return false;
#undef DO_
}

void S2C_CommonAPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protoc.S2C_CommonAPI)
  // required string api = 1;
  if (has_api()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->api().data(), this->api().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "api");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->api(), output);
  }

  // required string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protoc.S2C_CommonAPI)
}

::google::protobuf::uint8* S2C_CommonAPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protoc.S2C_CommonAPI)
  // required string api = 1;
  if (has_api()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->api().data(), this->api().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "api");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->api(), target);
  }

  // required string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protoc.S2C_CommonAPI)
  return target;
}

int S2C_CommonAPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string api = 1;
    if (has_api()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api());
    }

    // required string args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_CommonAPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_CommonAPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_CommonAPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_CommonAPI::MergeFrom(const S2C_CommonAPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_api()) {
      set_api(from.api());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_CommonAPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_CommonAPI::CopyFrom(const S2C_CommonAPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_CommonAPI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_CommonAPI::Swap(S2C_CommonAPI* other) {
  if (other != this) {
    std::swap(api_, other->api_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_CommonAPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_CommonAPI_descriptor_;
  metadata.reflection = S2C_CommonAPI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_UPDATE_PLAYER::kIdFieldNumber;
const int C2S_UPDATE_PLAYER::kHpFieldNumber;
const int C2S_UPDATE_PLAYER::kMpFieldNumber;
#endif  // !_MSC_VER

C2S_UPDATE_PLAYER::C2S_UPDATE_PLAYER()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protoc.C2S_UPDATE_PLAYER)
}

void C2S_UPDATE_PLAYER::InitAsDefaultInstance() {
}

C2S_UPDATE_PLAYER::C2S_UPDATE_PLAYER(const C2S_UPDATE_PLAYER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protoc.C2S_UPDATE_PLAYER)
}

void C2S_UPDATE_PLAYER::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hp_ = 0;
  mp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_UPDATE_PLAYER::~C2S_UPDATE_PLAYER() {
  // @@protoc_insertion_point(destructor:Protoc.C2S_UPDATE_PLAYER)
  SharedDtor();
}

void C2S_UPDATE_PLAYER::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void C2S_UPDATE_PLAYER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_UPDATE_PLAYER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_UPDATE_PLAYER_descriptor_;
}

const C2S_UPDATE_PLAYER& C2S_UPDATE_PLAYER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_main_2eproto();
  return *default_instance_;
}

C2S_UPDATE_PLAYER* C2S_UPDATE_PLAYER::default_instance_ = NULL;

C2S_UPDATE_PLAYER* C2S_UPDATE_PLAYER::New() const {
  return new C2S_UPDATE_PLAYER;
}

void C2S_UPDATE_PLAYER::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<C2S_UPDATE_PLAYER*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(hp_, mp_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_UPDATE_PLAYER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protoc.C2S_UPDATE_PLAYER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // required int32 hp = 4;
      case 4: {
        if (tag == 32) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mp;
        break;
      }

      // required int32 mp = 5;
      case 5: {
        if (tag == 40) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protoc.C2S_UPDATE_PLAYER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protoc.C2S_UPDATE_PLAYER)
  return false;
#undef DO_
}

void C2S_UPDATE_PLAYER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protoc.C2S_UPDATE_PLAYER)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // required int32 mp = 5;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protoc.C2S_UPDATE_PLAYER)
}

::google::protobuf::uint8* C2S_UPDATE_PLAYER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protoc.C2S_UPDATE_PLAYER)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // required int32 mp = 5;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protoc.C2S_UPDATE_PLAYER)
  return target;
}

int C2S_UPDATE_PLAYER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 mp = 5;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_UPDATE_PLAYER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_UPDATE_PLAYER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_UPDATE_PLAYER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_UPDATE_PLAYER::MergeFrom(const C2S_UPDATE_PLAYER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_UPDATE_PLAYER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_UPDATE_PLAYER::CopyFrom(const C2S_UPDATE_PLAYER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_UPDATE_PLAYER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_UPDATE_PLAYER::Swap(C2S_UPDATE_PLAYER* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_UPDATE_PLAYER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_UPDATE_PLAYER_descriptor_;
  metadata.reflection = C2S_UPDATE_PLAYER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_UPDATE_ENTITY::kIdFieldNumber;
const int C2S_UPDATE_ENTITY::kXFieldNumber;
const int C2S_UPDATE_ENTITY::kYFieldNumber;
const int C2S_UPDATE_ENTITY::kZFieldNumber;
#endif  // !_MSC_VER

C2S_UPDATE_ENTITY::C2S_UPDATE_ENTITY()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protoc.C2S_UPDATE_ENTITY)
}

void C2S_UPDATE_ENTITY::InitAsDefaultInstance() {
}

C2S_UPDATE_ENTITY::C2S_UPDATE_ENTITY(const C2S_UPDATE_ENTITY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protoc.C2S_UPDATE_ENTITY)
}

void C2S_UPDATE_ENTITY::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_UPDATE_ENTITY::~C2S_UPDATE_ENTITY() {
  // @@protoc_insertion_point(destructor:Protoc.C2S_UPDATE_ENTITY)
  SharedDtor();
}

void C2S_UPDATE_ENTITY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_UPDATE_ENTITY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_UPDATE_ENTITY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_UPDATE_ENTITY_descriptor_;
}

const C2S_UPDATE_ENTITY& C2S_UPDATE_ENTITY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_main_2eproto();
  return *default_instance_;
}

C2S_UPDATE_ENTITY* C2S_UPDATE_ENTITY::default_instance_ = NULL;

C2S_UPDATE_ENTITY* C2S_UPDATE_ENTITY::New() const {
  return new C2S_UPDATE_ENTITY;
}

void C2S_UPDATE_ENTITY::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<C2S_UPDATE_ENTITY*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_UPDATE_ENTITY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protoc.C2S_UPDATE_ENTITY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_z;
        break;
      }

      // required int32 z = 4;
      case 4: {
        if (tag == 32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protoc.C2S_UPDATE_ENTITY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protoc.C2S_UPDATE_ENTITY)
  return false;
#undef DO_
}

void C2S_UPDATE_ENTITY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protoc.C2S_UPDATE_ENTITY)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // required int32 z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protoc.C2S_UPDATE_ENTITY)
}

::google::protobuf::uint8* C2S_UPDATE_ENTITY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protoc.C2S_UPDATE_ENTITY)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // required int32 z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protoc.C2S_UPDATE_ENTITY)
  return target;
}

int C2S_UPDATE_ENTITY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 z = 4;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_UPDATE_ENTITY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_UPDATE_ENTITY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_UPDATE_ENTITY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_UPDATE_ENTITY::MergeFrom(const C2S_UPDATE_ENTITY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_UPDATE_ENTITY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_UPDATE_ENTITY::CopyFrom(const C2S_UPDATE_ENTITY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_UPDATE_ENTITY::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2S_UPDATE_ENTITY::Swap(C2S_UPDATE_ENTITY* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_UPDATE_ENTITY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_UPDATE_ENTITY_descriptor_;
  metadata.reflection = C2S_UPDATE_ENTITY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_CommonAPI::kApiFieldNumber;
const int C2S_CommonAPI::kArgsFieldNumber;
#endif  // !_MSC_VER

C2S_CommonAPI::C2S_CommonAPI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protoc.C2S_CommonAPI)
}

void C2S_CommonAPI::InitAsDefaultInstance() {
}

C2S_CommonAPI::C2S_CommonAPI(const C2S_CommonAPI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protoc.C2S_CommonAPI)
}

void C2S_CommonAPI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  api_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_CommonAPI::~C2S_CommonAPI() {
  // @@protoc_insertion_point(destructor:Protoc.C2S_CommonAPI)
  SharedDtor();
}

void C2S_CommonAPI::SharedDtor() {
  if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete api_;
  }
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void C2S_CommonAPI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_CommonAPI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_CommonAPI_descriptor_;
}

const C2S_CommonAPI& C2S_CommonAPI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_main_2eproto();
  return *default_instance_;
}

C2S_CommonAPI* C2S_CommonAPI::default_instance_ = NULL;

C2S_CommonAPI* C2S_CommonAPI::New() const {
  return new C2S_CommonAPI;
}

void C2S_CommonAPI::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_api()) {
      if (api_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        api_->clear();
      }
    }
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_CommonAPI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protoc.C2S_CommonAPI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string api = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->api().data(), this->api().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "api");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // required string args = 2;
      case 2: {
        if (tag == 18) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protoc.C2S_CommonAPI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protoc.C2S_CommonAPI)
  return false;
#undef DO_
}

void C2S_CommonAPI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protoc.C2S_CommonAPI)
  // required string api = 1;
  if (has_api()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->api().data(), this->api().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "api");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->api(), output);
  }

  // required string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protoc.C2S_CommonAPI)
}

::google::protobuf::uint8* C2S_CommonAPI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protoc.C2S_CommonAPI)
  // required string api = 1;
  if (has_api()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->api().data(), this->api().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "api");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->api(), target);
  }

  // required string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protoc.C2S_CommonAPI)
  return target;
}

int C2S_CommonAPI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string api = 1;
    if (has_api()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->api());
    }

    // required string args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_CommonAPI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_CommonAPI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_CommonAPI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_CommonAPI::MergeFrom(const C2S_CommonAPI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_api()) {
      set_api(from.api());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_CommonAPI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_CommonAPI::CopyFrom(const C2S_CommonAPI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_CommonAPI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_CommonAPI::Swap(C2S_CommonAPI* other) {
  if (other != this) {
    std::swap(api_, other->api_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_CommonAPI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_CommonAPI_descriptor_;
  metadata.reflection = C2S_CommonAPI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protoc

// @@protoc_insertion_point(global_scope)
